package com.justhire.driver;
 
 
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import com.justhire.common.GPSLocationFinder;
import com.justhire.driver.R;
import com.justhire.driver.TodayFragment;
import com.justhire.driver.WaitListFragment;
import com.justhire.driver.adapter.NavDrawerListAdapter;
import com.justhire.driver.model.NavDrawerItem;
import com.justhire.mobile.JustHireActivity;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Fragment;
import android.app.FragmentManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.TypedArray;
import android.net.NetworkInfo;
import android.net.ParseException;
import android.os.Bundle;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.widget.DrawerLayout;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;

/*
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import com.justhire.common.GPSLocationFinder;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;

*/
import android.net.ConnectivityManager;




public  class MainActivity extends JustHireActivity {
	private DrawerLayout mDrawerLayout;
	private ListView mDrawerList;
	private ActionBarDrawerToggle mDrawerToggle;

	// navigation drawer title
	private CharSequence mDrawerTitle;

	// used to store application title
	private CharSequence mTitle;

	// slide menu items
	private String[] navMenuTitles;
	private TypedArray navMenuIcons;

	private ArrayList<NavDrawerItem> navDrawerItems;
	private NavDrawerListAdapter adapter;
	Fragment activeFragement = null;
	
//   GPS location validation 
public static final String DATEFORMAT = "dd/MM/yy";
	
	public static final String DATEANDTIMEFORMAT = "dd/MM/yy HH:mm";
	
	protected boolean gpsLoaded = false;
	//public abstract  void handleResponse(String response);

	public void hideKeyboard() {

		// InputMethodManager inputManager = (InputMethodManager) this
		// .getSystemService(Context.INPUT_METHOD_SERVICE);

		// inputManager.hideSoftInputFromWindow(
		// this.getCurrentFocus()
		// .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
	}
	
	public GPSLocationFinder getGPSLocationFinder(Context ctx)
	{
		GPSLocationFinder locationFinder = new GPSLocationFinder(ctx);
		return locationFinder;
	}
	
	protected boolean isInternetUp() {
		NetworkInfo info = ((ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE))
				.getActiveNetworkInfo();
		if (info == null || !info.isConnected()) {
			return false;
		}
		if (info.isRoaming()) {
			// if you want to disable Internet while roaming, just return false
			return true;
		}
		return true;
	}

	
	protected void showNoGpsAlertDialog() {
		final AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setMessage(
				"Please enable GPS and Wireless Location on your device to read the location., do you want to enable it?")
				.setCancelable(false)
				.setPositiveButton("Yes",
						new DialogInterface.OnClickListener() {
							public void onClick(final DialogInterface dialog,
									final int id) {
								startActivity(new Intent(
										android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));
							}
						})
				.setNegativeButton("No", new DialogInterface.OnClickListener() {
					public void onClick(final DialogInterface dialog,
							final int id) {
						dialog.cancel();
					}
				});
		final AlertDialog alert = builder.create();
		alert.show();
	}
	
	protected void showNoInternetAlertDialog() {
		final AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setMessage(
				"The device has no Internet Connection., do you want to enable it?")
				.setCancelable(false)
				.setPositiveButton("Yes",
						new DialogInterface.OnClickListener() {
							public void onClick(final DialogInterface dialog,
									final int id) {
								startActivity(new Intent(
										android.provider.Settings.ACTION_WIRELESS_SETTINGS));
							}
						})
				.setNegativeButton("No", new DialogInterface.OnClickListener() {
					public void onClick(final DialogInterface dialog,
							final int id) {
						dialog.cancel();
					}
				});
		final AlertDialog alert = builder.create();
		alert.show();
	}
	
	@SuppressWarnings("deprecation")
	protected String getFormattedTime(Date date)
	{
		String hr=String.valueOf(date.getHours());
		if(date.getHours() < 10)
		{
			hr = "0" + date.getHours();
		}
		
		String min = String.valueOf(date.getMinutes());
		if(date.getMinutes() < 10)
		{
			min = "0" + date.getMinutes();
		}
		return hr + " : " + min;
	}
	
	protected void showOKDialog(String message) {
		final AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setMessage(message)
				.setCancelable(false)
				.setPositiveButton("OK",
						new DialogInterface.OnClickListener() {
							public void onClick(final DialogInterface dialog,
									final int id) {
								startActivity(new Intent(
										android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));
							}
					
				});
		final AlertDialog alert = builder.create();
		alert.show();
	}

	

	
	protected void validateDates(String startDateVal, String endDateVal)
			throws Exception {
		SimpleDateFormat sdf = new SimpleDateFormat(DATEANDTIMEFORMAT,
				Locale.ENGLISH);
		long startDateTime = 0;
		long endDateTime = 0;
		sdf.setLenient(false);
		Date dateNow = Calendar.getInstance().getTime();
		dateNow.setSeconds(0);

		if (startDateVal == null && endDateVal != null) {
			throw new Exception("Please enter Booking From Date and Time "
					+ sdf.format(dateNow));
		}
		
		if (startDateVal != null) {
			try {
				startDateTime = sdf.parse(startDateVal).getTime();
				Date date = new Date(startDateTime);
				date.setMinutes(date.getMinutes() - 1);

				if (date.compareTo(dateNow) < 0) {
					dateNow.setHours(dateNow.getHours() + 1);
					throw new Exception(
							"Booking can be done 1 hour in advance. Please select date on or after  "
									+ sdf.format(dateNow));
				}

			} catch (ParseException e) {
				throw new Exception(
						"Invalid date format. Please enter in dd/MM/yy HH:mm format.");

			}

			if (endDateVal != null) {
				try {

					endDateTime = sdf.parse(endDateVal).getTime();
					Date date = new Date(endDateTime);

					if (new Date(startDateTime).compareTo(date) > 0) {
						throw new Exception(
								"Please select the date and time on or after : "
										+ startDateVal);
					}

				} catch (ParseException e) {
					throw new Exception(
							"Invalid date format. Please enter in dd/MM/yy HH:ss format.");
				}
			}
		}

	}
	

	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		mTitle = mDrawerTitle = getTitle();

		// load slide menu items
		navMenuTitles = getResources().getStringArray(R.array.nav_drawer_items);

		// navigation  drawer icons from resources
		navMenuIcons = getResources()
				.obtainTypedArray(R.array.nav_drawer_icons);

		mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
		mDrawerList = (ListView) findViewById(R.id.list_slidermenu);

		navDrawerItems = new ArrayList<NavDrawerItem>();

		// adding navigation drawer items to array
		
		// To day
		navDrawerItems.add(new NavDrawerItem(navMenuTitles[0], navMenuIcons.getResourceId(0, -1)));
		// wait list
		navDrawerItems.add(new NavDrawerItem(navMenuTitles[1], navMenuIcons.getResourceId(1, -1)));
		
				
		// Recycle the typed array
		navMenuIcons.recycle();

		mDrawerList.setOnItemClickListener(new SlideMenuClickListener());

		// setting the nav drawer list adapter
		adapter = new NavDrawerListAdapter(getApplicationContext(),
				navDrawerItems);
		mDrawerList.setAdapter(adapter);

		// enabling action bar app icon and behaving it as toggle button
		getActionBar().setDisplayHomeAsUpEnabled(true);
		getActionBar().setHomeButtonEnabled(true);

		mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout,
				R.drawable.ic_drawer, //nav menu toggle icon
				R.string.app_name, // nav drawer open - description for accessibility
				R.string.app_name // nav drawer close - description for accessibility
		) {
			public void onDrawerClosed(View view) {
				getActionBar().setTitle(mTitle);
				// calling onPrepareOptionsMenu() to show action bar icons
				invalidateOptionsMenu();
			}

			public void onDrawerOpened(View drawerView) {
				getActionBar().setTitle(mDrawerTitle);
				// calling onPrepareOptionsMenu() to hide action bar icons
				invalidateOptionsMenu();
			}
		};
		mDrawerLayout.setDrawerListener(mDrawerToggle);

		if (savedInstanceState == null) {
			// on first time display view for first nav item
			displayView(0);
		}
	}

	/**
	 * Slide menu item click listener
	 * */
	private class SlideMenuClickListener implements
			ListView.OnItemClickListener {
		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position,
				long id) {
			// display view for selected nav drawer item
			displayView(position);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// toggle navigation drawer on selecting action bar app icon/title
		if (mDrawerToggle.onOptionsItemSelected(item)) {
			return true;
		}
		// Handle action bar actions click
		switch (item.getItemId()) {
		case R.id.action_settings:
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}

	/* *
	 * Called when invalidateOptionsMenu() is triggered
	 */
	@Override
	public boolean onPrepareOptionsMenu(Menu menu) {
		// if nav drawer is opened, hide the action items
		boolean drawerOpen = mDrawerLayout.isDrawerOpen(mDrawerList);
		menu.findItem(R.id.action_settings).setVisible(!drawerOpen);
		return super.onPrepareOptionsMenu(menu);
	}

	/**
	 * Displaying fragment view for selected nav drawer list item
	 * */
	private void displayView(int position) {
		// update the main content by replacing fragments
		Fragment fragment = null;
		switch (position) {
		case 0:
			fragment = new TodayFragment();
			break;
						
		case 1:
			fragment = new WaitListFragment();
			break;
		
		default:
			break;
		}

		if (fragment != null) {
			FragmentManager fragmentManager = getFragmentManager();
			fragmentManager.beginTransaction()
					.replace(R.id.frame_container, fragment).commit();

			// update selected item and title, then close the drawer
			mDrawerList.setItemChecked(position, true);
			mDrawerList.setSelection(position);
			setTitle(navMenuTitles[position]);
			mDrawerLayout.closeDrawer(mDrawerList);
		} else {
			// error in creating fragment
			Log.e("MainActivity", "Error in creating fragment");
		}
	}

	@Override
	public void setTitle(CharSequence title) {
		mTitle = title;
		getActionBar().setTitle(mTitle);
	}

	/**
	 * When using the ActionBarDrawerToggle, you must call it during
	 * onPostCreate() and onConfigurationChanged()...
	 */

	@Override
	protected void onPostCreate(Bundle savedInstanceState) {
		super.onPostCreate(savedInstanceState);
		// Sync the toggle state after onRestoreInstanceState has occurred.
		mDrawerToggle.syncState();
	}

	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
		// Pass any configuration change to the drawer toggls
		mDrawerToggle.onConfigurationChanged(newConfig);
	}

	@Override
	public void handleResponse(String response) {
		// TODO Auto-generated method stub
		//activeFragement.render(response);
		
	}
	
	public void callService(Fragment activeFragement, String params)
	{
	   this.activeFragement	= activeFragement;
	}
	

}


 

